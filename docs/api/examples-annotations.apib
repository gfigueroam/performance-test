FORMAT: 1A

# Annotations

[scenario source](https://hmhco.slack.com/files/U07CMCTU1/F6SHY9X08/user-centric-content.pdf)

Throughout our ebooks we offer the ability for users to take notes directly in the text book. A typical annotation object would be:

```
{
  userID:	UserIDfromIDS,
  contentID:	IDfromcatalog,
  coordinate_locator:	wheretheannotationislocated,
  annotationtext:	freetextoftheannotation,
  annotationflags:	{
    color:	acolorsetting,
    ...
  }
}
```

# Requirements
1. Teacher can view a studentâ€™s annotations.
1. User can get a list of all annotations within a given module.
1. Teacher can make an annotation and share with multiple students.
1. User can get list of all annotations they have created across all pieces of content.
1. User can get list of all annotations stored within a given content ID
1. User can remove an annotation they made.
1. User can hide annotation a teacher has made.

## Data Modeling
Annotations are user data and therefore stored in `data.user`. Each annotation has a content ID, a locator, and the text of the annotation itself. In addition there is some annotation metadata such as the color to use for highlighting. Annotations need to be retrieved in batch for a given user by content ID to enable highlighting of all annotations within a given content ID.

Annotations are stored in a hierarchy defined by key prefix. All annotations for a user will be stored under a UDS key beginning with `annotation.`, with subsequent parts of the key identifying the content and module and finally a unique id for the annotation. The final key will use the format `annotation.<contentID>.<moduleID>.<annotationID>`. This makes it easy to use the `data.user.query` API to retrieve all annotations within a given module ID or content ID, or retrieve all annotations for a user.

## Data Definition
Annotations are a [built-in data type](common-types.html) and there is no additional configuration necessary.

## Data Manipulation (for a given user)
### Get existing annotations for module1 that's part of contentA
```
data.user.query({
  keyPrefix: 'annotation.contentA.module1',
})

Response:
{
  "ok": true,
  "result": [{
    key: "annotation.contentA.module1.annotation1"
    type: "annotation",
    data: {
      createdAt: 1516919976,
      locator: {
        pageNumber: 12,
        paragraph: 2,
        offset: 8
      },
      text: "I really liked the way the author explained this."
    }
  }]
}
```

### Get annotations across all modules of contentA
```
data.user.query({
  keyPrefix: 'annotation.contentA',
})

Response:
{
  "ok": true,
  "result": [{
    key: "annotation.contentA.module1.annotation1"
    type: "annotation",
    data: {
      createdAt: 1516919976,
      locator: {
        pageNumber: 12,
        paragraph: 2,
        offset: 8
      },
      text: "I really liked the way the author explained this."
    }
  }, {
    key: "annotation.contentA.module2.annotation2"
    type: "annotation",
    data: {
      createdAt: 1516919977,
      locator: {
        pageNumber: 20,
        paragraph: 5,
        offset: 124
      },
      text: "This is exactly how the teacher explained it during fifth period."
    }
  }, {
    key: "annotation.contentA.module5.annotation3"
    type: "annotation",
    data: {
      createdBy: 'TEACHER-USER-ID'
      createdAt: 1516919978,
      locator: {
        pageNumber: 78,
        paragraph: 3,
        offset: 35
      },
      text: "I think you should study this to prepare for next week's quiz."
    }
  }]
}
```

### Add a new annotation
Simply store the annotation using `data.user.set`; the annotation ID can be generated as a GUID while the remaining portion of the UDS key should comply with the annotation key standard described above.
```
data.user.set({
  key: 'annotation.contentA.module3.589624.12213.123123',
  type: 'annotation',
  data: {
    createdAt: 1516919977,
    locator: {
      pageNumber: 20,
      paragraph: 5,
      offset: 124
    },
    text: "This is exactly how the teacher explained it during fifth period."
  }
})

Response:
{
  "ok": true
}
```

### Delete an annotation
Deleting an annotation is trivial using `data.user.delete`.

```
data.user.delete({
  key: 'annotation.contentA.module3.589624.12213.123123',
});

Response:
{
  "ok": true
}
```

### Teacher shares an annotation with one or more students
The teacher creates an annotation, then stores it into each student's UDS annotations store one at a time. (Obviously the teacher's experience would be a UI where they enter the note into some system like Ed, and then once the teacher selects the students to receive the annotation, that system stores into into each student's UDS automatically.) By storing directly into a student's UDS annotations, the teacher's annotation is automatically returned by queries when displaying annotations visible to the student. The `createdBy` field is respected by the applications which display the annotation to the student, prohibiting the student from editing the teacher's annotation, but allowing the student to delete the annotation. UDS itself has no semantic meaning of the annotation schema and does not prohibit the student from editing their own annotation. Please note that the `requestor` field is optional; if UDS is called with a user token, the `requestor` parameter will be automatically set to the user identified by the user token.

```
data.user.set({
  key: 'annotation-contentA-module3-589624-12213-123123',
  type: 'annotation',
  requestor: 'TEACHER-USER-ID',
  owner: 'STUDENT-USER-ID'
  data: {
    createdBy: 'TEACHER-USER-ID',
    createdAt: 1516919977,
    locator: {
      pageNumber: 20,
      paragraph: 5,
      offset: 124
    },
    text: "This is exactly how I explained it during fifth period."
  }
})

Response:
{
  "ok": true
}
```

## Limitations
UDS does not:
* allow a user to apply a custom order to their annotations

UDS could, but does not:
* limit the number of annotations stored for a given user for each content ID. This is because quotas apply only to application data, not to user data.
